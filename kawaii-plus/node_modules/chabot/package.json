{
  "name": "chabot",
  "version": "0.2.3",
  "description": "Chabot is Web-hook receiver for ChatWork",
  "main": "lib/chabot.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "astronaughts"
  },
  "license": "MIT",
  "preferGlobal": true,
  "bin": {
    "chabot": "bin/chabot"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/astronaughts/chabot.git"
  },
  "dependencies": {
    "simple-cw-node": "~0.1.2",
    "connect": "~2.11.2",
    "connect-route": "~0.1.3",
    "ejs": "~0.8.5",
    "colors": "~0.6.2",
    "commander": "~2.1.0",
    "fs-extra": "~0.8.1"
  },
  "readme": "Chabot\n======\n\nChabot is Web-hook receiver for ChatWork.\n\n## Chabot とは\n\nChabot は ChatWork と Webhook を提供しているサービスとを連携させるアプリケーションです。\n\nWebHook で受け取ったデータを、ejs テンプレートで定義したメッセージを指定したチャットに送信することが出来ます。\n\n### インストール\n\n```\nnpm install -g chabot\n```\n\n### 使い方\n\nインストールが完了すると `chabot` コマンドが利用できるようになります。\n\n```bash\n$ chabot -h\n\n  Usage: chabot [options] [command]\n\n  Commands:\n\n    create [options] [appname] create chabot app\n\n  Options:\n\n    -h, --help     output usage information\n    -V, --version  output the version number\n```\n\n#### Chabot アプリケーションを作成する\n\n `chabot` アプリの作成は `chabot create` です。`-d` オプションで作成したい場所のディレクトリパスを指定します。\n\n```bash\n$ chabot create -h\n\n  Usage: create [options] [appname]\n\n  Options:\n\n    -h, --help        output usage information\n    -d, --dist [dir]  the directory to place the app in [default: CWD]\n    -f, --force       overwrite existing directory\n```\n\n#### コマンドを実行してみる\n\n実際に `chabot` アプリを作成してみましょう。\n\n```bash\n$ chabot create -d ~/ my_first_chabot\n  copying files.\n  completed!\n   > /Users/astronaughts/chabot/my_first_chabot\n```\n\n#### 設定\n\n設定ファイルを開いてみましょう。\n\n```bash\n$ cd ~/chabot/my_first_chabot\n$ vi config.json\n```\n\n初期値として `github` というボットの設定があります。\n\n```json \n{\n    \"port\": 5000,\n    \"bots\": {\n        \"github\": {\n            \"hostname\": \"github.com\",\n            \"token\": \"YOUR_TOKEN\",\n            \"route\": \"/github/hooks/:roomid\"\n        }\n    }\n}\n```\n\n##### port\n\nポートを指定します。\n\n##### bots\n\nボットの設定を指定します。複数定義可能です。\n\n##### bot: token\n\nボットの発言としたいアカウントの ChatoWork API のトークンを指定します。\n\n##### bot: route\n\n外部サービスの WebHook の送信先として URL を指定します。\nURL には `:roomid` を必ず含めるようにします。\n`:roomid` はボットに発言させたいチャットの ID を指定します。\n\n#### アプリの構造\n\n* my_first_chabot/\n    * bots/\n    * templates/\n    * node_modules/\n    * app.js\n    * config.json\n    * package.json\n\n##### bots ディレクトリ\n\nbot の実装ファイルをここに配置します。\n\n##### templates ディレクトリ\n\nbot が送信するメッセージのテンプレートファイルをここに配置します。\n\n#### ボットの実装\n\n`chabot create` で最初にサンプルとして `bots/github.js` が配置されています。\n\n```js\nmodule.exports = function (chabot) {\n\n    // WebHook で受けたデータをセット\n    var payload = JSON.parse(chabot.data.payload);\n    // ChatWork API の endpoint をセット\n    var endpoint = '/rooms/' + chabot.roomid + '/messages';\n    // templats/ 内のメッセージテンプレートを読み込む\n    var template = chabot.readTemplate('github.ejs');\n    // WebHook で受けたデータでメッセージテンプレートを描画\n    var message_body = chabot.render(template, payload);\n\n    // ChatWork API でメッセージ送信\n    chabot.client\n        .post(endpoint, {\n            body: message_body\n        })\n        .done(function (res) {\n            chabot.log('done');\n        })\n        .fail(function (err) {\n            chabot.error(err);\n        });\n};\n```\n\n#### chabot オブジェクト\n\n##### chabot.roomid\n\nURL に指定されたチャットルームの ID です。\n\n##### chabot.client\n\nChatWork API を操作するクライアントです。詳細は以下を参照。\n\n[astronaughts/simple-cw-node - github](https://github.com/astronaughts/simple-cw-node)\n\n##### chabot.data\n\nWebHook から受け取った response です。\n\n##### chabot.readTemplate\n\ntemplates で配置したテンプレートファイルを読み込みます。\n\n##### chabot.render\n\n読み込んだテンプレートファイルを描画します。\n\n#### テンプレートの作成\n\nテンプレートは ejs が利用できます。\n\n[visionmedia/ejs - github](https://github.com/visionmedia/ejs) \n\n`github` ボットのテンプレートは以下のように定義してあります。\n\n```\nプッシュのお知らせ♪\n[info]<%= head_commit.message %>\n[hr]変更のあったファイル：\n<% if (head_commit.added.length) { %>【追加】\n<% head_commit.added.forEach(function (file) { %>　<%= file %>\n<% }) %><% } else { %>【追加】\n　なし\n<% } %><% if (head_commit.removed.length) { %>【削除】\n<% head_commit.removed.forEach(function (file) { %>　<%= file %>\n<% }) %><% } else { %>【削除】\n　なし\n<% } %><% if (head_commit.modified.length) { %>【修正】\n<% head_commit.modified.forEach(function (file) { %>　<%= file %>\n<% }) %><% } else { %>【修正】\n　なし\n<% } %>[hr]リポジトリ：<%= repository.name %>\nコミット　：<%= head_commit.url %>\nコミッター：<%= head_commit.committer.username %>\n[/info]\n```\n\n### 実行\n\n以下のコマンドで簡単に実行可能です。\n\n```bash\n$ node app\nloaded bot: github\n```\n\n`curl` などで、github の WebHook のデータを試しに送信してみてください。\n\n[github WebHook sample JSON](https://gist.github.com/gjtorikian/5171861#file-sample_payload-json)",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/astronaughts/chabot/issues"
  },
  "_id": "chabot@0.2.3",
  "dist": {
    "shasum": "84af763ddeab4055613777a4b449c61344c3917d",
    "tarball": "http://registry.npmjs.org/chabot/-/chabot-0.2.3.tgz"
  },
  "_from": "chabot@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "astronaughts",
    "email": "hello@astronaughts.net"
  },
  "maintainers": [
    {
      "name": "astronaughts",
      "email": "hello@astronaughts.net"
    }
  ],
  "directories": {},
  "_shasum": "84af763ddeab4055613777a4b449c61344c3917d",
  "_resolved": "https://registry.npmjs.org/chabot/-/chabot-0.2.3.tgz",
  "homepage": "https://github.com/astronaughts/chabot"
}
